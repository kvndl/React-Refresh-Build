{"version":3,"sources":["components/Item.js","components/List.js","components/ItemPage.js","App.js","serviceWorker.js","index.js"],"names":["Item","props","itemName","React","useState","name","itemColor","setItemColor","itemId","id","className","style","backgroundColor","onClick","color","to","List","items","map","itm","key","ItemPage","urlID","match","params","colorString","toString","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mRA0BeA,MAvBf,SAAcC,GAEZ,IAAMC,EAAWC,IAAMC,SAASH,EAAMI,MAFnB,EAGeF,IAAMC,SAAS,SAH9B,mBAGZE,EAHY,KAGDC,EAHC,KAIbC,EAASL,IAAMC,SAASH,EAAMQ,IAEpC,OACE,yBAAKC,UAAU,OAAOC,MAAO,CAACC,gBAAiBN,IAC7C,4BAAKJ,GACL,6BACE,4BAAQW,QAAS,kBAAMN,EAAaN,EAAMa,SAA1C,cAGA,kBAAC,IAAD,CAAMC,GAAI,SAAWP,GACnB,yCACSN,EADT,eCiBKc,MA/Bf,WAEE,IAkBIC,EAlBY,CACd,CACEZ,KAAM,MACNS,MAAO,MACPL,GAAI,KAEN,CACEJ,KAAM,MACNS,MAAO,OACPL,GAAI,KAEN,CACEJ,KAAM,OACNS,MAAO,QACPL,GAAI,MAIcS,KAAI,SAACC,GAAD,OACxB,kBAAC,EAAD,CAAMd,KAAMc,EAAId,KAAMS,MAAOK,EAAIL,MAAOM,IAAKD,EAAIV,QAGnD,OACE,6BACGQ,ICPQI,MAnBf,SAAkBpB,GAChB,IAAMqB,EAAQrB,EAAMsB,MAAMC,OAAOf,GAC3BP,EAAWC,IAAMC,SAASH,EAAMI,MAChCoB,EAActB,IAAMC,SAASH,EAAMa,OAAOY,WAEhD,OACE,6BACE,qCAAWxB,GACX,kCAAQoB,GACR,wBAAIX,MAAO,CAACG,MAAOb,EAAMa,QAASW,GAClC,6BACE,kBAAC,IAAD,CAAMV,GAAG,KACP,oDCQKY,MAbf,WACE,OACE,yBAAKjB,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOkB,OAAK,EAACC,KAAM,IAAKC,UAAWd,IACnC,kBAAC,IAAD,CAAOa,KAAM,YAAaC,UAAWT,QCJ3BU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASX,MACvB,2DCZNY,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.326c6950.chunk.js","sourcesContent":["import React from 'react';\nimport {Link} from 'react-router-dom';\n\nfunction Item(props) {\n\n  const itemName = React.useState(props.name);\n  const [itemColor, setItemColor] = React.useState('white');\n  const itemId = React.useState(props.id);\n\n  return (\n    <div className=\"item\" style={{backgroundColor: itemColor}}>\n      <h1>{itemName}</h1>\n      <div>\n        <button onClick={() => setItemColor(props.color)}>\n          Show Color\n        </button>\n        <Link to={'/item/' + itemId}>\n          <button>\n            Go to {itemName}'s Page\n          </button>\n        </Link>\n      </div>\n    </div>\n  )\n}\n\nexport default Item;","import React from 'react';\nimport Item from \"./Item.js\";\n\nfunction List() {\n\n  let itemArray = [\n    {\n      name: \"Cat\",\n      color: \"red\",\n      id: \"1\"\n    },\n    {\n      name: \"Dog\",\n      color: \"blue\",\n      id: \"2\"\n    },\n    {\n      name: \"Fish\",\n      color: \"green\",\n      id: \"3\"\n    }\n  ];\n\n  let items = itemArray.map((itm)=>\n    <Item name={itm.name} color={itm.color} key={itm.id}></Item>\n  );\n\n  return (\n    <div>\n      {items}\n    </div>\n  )\n}\n\nexport default List;","import React from 'react';\nimport {Link} from 'react-router-dom';\n\nfunction ItemPage(props) {\n  const urlID = props.match.params.id;\n  const itemName = React.useState(props.name);\n  const colorString = React.useState(props.color).toString();\n\n  return (\n    <div>\n      <h1>Name: {itemName}</h1>\n      <p>ID: {urlID}</p>\n      <h3 style={{color: props.color}}>{colorString}</h3>\n      <div>\n        <Link to=\"/\">\n          <button>Back to List</button>\n        </Link>\n      </div>\n    </div>\n  )\n}\n\nexport default ItemPage;","import React from 'react';\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport List from './components/List.js';\nimport ItemPage from './components/ItemPage.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route exact path={\"/\"} component={List}/>\n          <Route path={\"/item/:id\"} component={ItemPage}/>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}